#!/usr/bin/python3
# -*- coding:utf-8 -*-
#
# Software Boutique is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Software Boutique is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Software Boutique. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2020 Luke Horwell <code@horwell.me>
# Copyright (C) 2015-2018 Martin Wimpress <code@flexion.org>
#

"""
Software Boutique - a software distribution program for Ubuntu MATE to curate
a selection of tried & tested, best in class applications that integrate well
with the Ubuntu MATE desktop.

The program will operate as a stand alone client to libboutique via the
WebKitGTK interface when the curated collection is not present (internally
known as the index).
"""

import argparse
import gettext
import inspect
import json
import locale
import os
import requests
import subprocess
import sys
from threading import Thread

__VERSION__ = "20.04.0"

# Import Software Boutique's Python modules, either relatively (development)
# or system-wide.
if os.path.exists(os.path.dirname(__file__) + "/pylib/"):
    try:
        import pylib as SBLib
    except (ImportError, Exception) as e:
        print("Failed to import modules relatively.\n")
        raise e
else:
    try:
        import software_boutique as SBLib
    except (ImportError, Exception) as e:
        print("Failed to initalise this application's Python modules!\n")
        raise e

Common = SBLib.common
Controller = SBLib.controller
Locales = SBLib.locales.LOCALES
Preferences = SBLib.preferences
AppWindow = SBLib.views.app_window
WebView = SBLib.views.web_view


class SoftwareBoutique(object):
    """
    The main execution of the GUI.
    """
    def __init__(self):
        """
        Initalise controller and pre-initalise the application, such as checking
        the styling is present.
        """
        data_source = Common.get_data_source()
        self.version = __VERSION__
        self.dbg = dbg
        self.webview = None
        self.main = None

        # Check the app's styles are compiled and can be read.
        if not os.path.exists(os.path.join(data_source, "view", "boutique.css")):
            if data_source.startswith("/usr"):
                dbg.stdout(_("Software Boutique is missing critical resources at this path:"), dbg.error, 0)
                dbg.stdout("  => " + data_source, dbg.error, 0)
                dbg.stdout(_("The application cannot start. Please try re-installing Software Boutique."), dbg.error, 0)
            else:
                dbg.stdout("Missing styles! Please run 'scripts/build-styles.sh' then try again.", dbg.error, 0)
            exit(1)

    def start(self):
        """
        Runs when the page within the WebView is ready.

        This function will:
            - Get GTK colours and override the CSS variables.
            - Send variable containing key/value locales, category and settings.
        """
        # Prepare Controller
        dbg.stdout("Initalizing Controller...", dbg.action, 1)
        self.controller = Controller.SoftwareBoutiqueController(self, args)
        dbg.stdout("Controller ready.", dbg.success, 1)

        dbg.stdout("Preparing Software Boutique...", dbg.action, 1)
        data_source = Common.get_data_source()

        # Apply current theme colours to view
        gtk_colours = AppWindow.get_gtk3_theme_colours()
        css_keys = []
        for css_variable in gtk_colours.keys():
            css_keys.append("--{0}: {1}".format(css_variable, gtk_colours[css_variable]))
        self.webview.run_js("$('body').append('<style>:root {" + ";".join(css_keys) + "}</style>')")

        if gtk_colours["dark"] == True:
            self.webview.run_js("$('body').addClass('dark')")

        # Pass locales to the view
        self.set_view_variable("LOCALE", Locales)

        # Pass categories and their icons to the view.
        categories_path = os.path.join(data_source, "categories.json")
        fallback_icon = os.path.join(data_source, "view/ui/generic-package.svg")

        with open(categories_path, "r") as f:
            categories = json.load(f)

        for category in categories:
            category["icon_path"] = AppWindow.get_gtk_icon_path(category["gtk_icon"], 24, fallback_icon)
        self.set_view_variable("CATEGORIES", categories)

        # Load SVGs into memory (for in-line style manipulation)
        with open(os.path.join(data_source, "view/ui/svgs.json")) as f:
            svgs = json.load(f)

        SVGS = {}
        for svg in svgs:
            svg_path = os.path.join(data_source, "view/ui/" + svg)
            if os.path.exists(svg_path):
                with open(svg_path) as f:
                    SVGS[svg.replace(".svg", "")] = "".join(f.readlines())

        self.set_view_variable("SVGS", SVGS)

        # Ready!
        self.webview.run_js("build_view()")
        self.main.show_window()

    def shutdown(self):
        """
        The application requested to exit. Gracefully stop the execution.
        """
        dbg.stdout("Closing Software Boutique...", dbg.action, 1)
        if self.controller.shutdown():
            exit(0)
        else:
            # TODO: Show message to the user. Controller could return error codes.
            dbg.stdout("Not possible to quit gracefully right now.", dbg.warning)

    def incoming_request(self, raw):
        """
        Receive data (e.g. user input) from the view.
        This will be converted to a Python dictonary for the controller/model to parse.

        :param raw: String containing the JSON data (in string format)
        """
        dbg.stdout("→ Controller: " + str(raw), dbg.debug, 1)

        try:
            data = json.loads(raw)
        except Exception:
            dbg.stdout("Internal Error: Controller cannot parse data!", dbg.error)
            return False

        try:
            request = data["request"]
        except Exception:
            dbg.stdout("Internal Error: Controller received invalid data!", dbg.error)
            dbg.stdout(data, dbg.error)
            return False

        self.controller.process_view_request(request, data)

    def send_data(self, function, data):
        """
        Send data (e.g. interface update) to the view.
        This will be converted to JSON (string) for the view to parse.

        :param function: Name of JavaScript function to execute.
        :param data: Python dictonary containing the JSON data (in dictionary format)
        """
        dbg.stdout("→ View: " + str(data), dbg.debug)

        try:
            data = json.dumps(data, ensure_ascii=False)
            self.webview.send_data(function, data)
            return True
        except Exception:
            dbg.stdout("Internal Error: Cannot parse data for view!", dbg.error)
            return False

    def set_view_variable(self, variable, data):
        """
        Updates a JS variable in the view containing JSON data.
        """
        dbg.stdout("Setting view variable: " + variable, dbg.debug, 1)
        if type(data) == dict:
            data = json.dumps(data, ensure_ascii=False)
        self.webview.run_js("{0} = {1};".format(variable, data))


def parse_parameters():
    """
    Responsible for processing arguments entered at the command line.
    """
    global _
    parser = argparse.ArgumentParser(add_help=False)
    parser._optionals.title = _("Optional arguments")
    parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
    parser.add_argument("-v", "--version", help=_("Print progran version and exit"), action="store_true")
    parser.add_argument("-d", "--verbose", help=_("Be verbose for diagnosis/debugging"), action="store_true")
    parser.add_argument("--arch", help=_("Show index listings for a specific architecture, e.g. armhf"))
    parser.add_argument("--codename", help=_("Show index listings for a specific release, e.g. bionic"))
    parser.add_argument("--locale", help=_("Force locale for interface"))
    parser.add_argument("--no-apt", help=_("Disable apt (PackageKit) backend"), action="store_true")
    parser.add_argument("--no-snap", help=_("Disable snapd backend"), action="store_true")

    # For development use only - developer tools and frontend testing
    parser.add_argument("--inspect", help=argparse.SUPPRESS, action="store_true")

    args = parser.parse_args()

    if args.version:
        dbg.stdout("{0} {1}".format(_("Version"), __VERSION__))
        exit(0)

    if args.verbose:
        dbg.verbose_level = 1
        dbg.stdout("=> Verbose enabled", dbg.debug, 1)

    if args.inspect:
        dbg.verbose_level = 2

    if args.arch:
        dbg.stdout("=> Showing listings for arch: " + args.arch, dbg.debug)

    if args.codename:
        dbg.stdout("=> Showing listings for release: " + args.codename, dbg.debug)

    if args.locale:
        _ = Common.setup_translations(__file__, "software-boutique", arg.locale)
        dbg.stdout("=> Forcing locale: " + arg.locale, dbg.debug)

    if args.no_apt:
        dbg.stdout("=> PackageKit disabled via argument", dbg.debug, 1)

    if args.no_snap:
        dbg.stdout("=> Snapd disabled via argument", dbg.debug, 1)

    return args


if __name__ == "__main__":
    dbg = Common.Debugging()
    _ = Common.setup_translations(__file__, "software-boutique")
    args = parse_parameters()
    pref = Preferences.Preferences(dbg, "preferences", "software-boutique")

    app = SoftwareBoutique()
    app.webview = WebView.WebView(dbg, app)
    app.main = AppWindow.ApplicationWindow(app)
    app.main.build(app.webview, Common.get_data_source(), Locales["title"])
    app.main.run()
