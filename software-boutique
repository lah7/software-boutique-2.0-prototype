#!/usr/bin/python3
# -*- coding:utf-8 -*-
#
# Copyright (C) 2015-2019 Luke Horwell <code@horwell.me>
# Copyright (C) 2015-2018 Martin Wimpress <code@flexion.org>
#
# Software Boutique is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Software Boutique is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Software Boutique. If not, see <http://www.gnu.org/licenses/>.
#

"""
Software Boutique - a software distribution program for Ubuntu MATE to curate
a selection of tried & tested, best in class applications that integrate well
with the Ubuntu MATE desktop.
"""

import argparse
import gettext
import inspect
import json
import locale
import os
import random
import requests
import signal
import subprocess
import sys
import time
import traceback
import webbrowser
from datetime import datetime
from threading import Thread
from shutil import rmtree

__VERSION__ = "19.10.0"

try:
    import pylib.config as Config
    import pylib.common as Common
    import pylib.distro as Distro
    import pylib.preferences as Preferences
    import pylib.views.app_window as ViewAppWindow
    import pylib.views.notification as ViewNotification
    import pylib.views.web_view as ViewWebView
except ImportError:
    import software_boutique.config as Config
    import software_boutique.common as Common
    import software_boutique.distro as Distro
    import software_boutique.preferences as Preferences
    import software_boutique.views.app_window as ViewAppWindow
    import software_boutique.views.notification as ViewNotification
    import software_boutique.views.web_view as ViewWebView


class SoftwareBoutiqueController(object):
    """
    The main execution of the GUI.
    """
    def __init__(self):
        data_source = Common.get_data_source()

        # Check the app's styles are compiled and can be read.
        if not os.path.exists(os.path.join(data_source, "view", "boutique.css")):
            if data_source.startswith("/usr"):
                dbg.stdout(_("Software Boutique is missing critical resources at this path:"), dbg.error, 0)
                dbg.stdout("  => " + data_source, dbg.error, 0)
                dbg.stdout(_("The application cannot start. Please try re-installing Software Boutique."), dbg.error, 0)
            else:
                dbg.stdout("Missing styles! Please run 'scripts/build-styles.sh' then try again.", dbg.error, 0)
            exit(1)

        # User Preferences
        if pref.read("advanced-mode", False) == True:
            self.advanced_mode = True
        else:
            self.advanced_mode = False

    def start(self):
        """
        Runs when the page within the WebView is ready.
        """
        dbg.stdout("Preparing Software Boutique...", dbg.action, 1)

        # Apply current theme colours to view
        gtk_colours = ViewAppWindow.get_gtk3_theme_colours()
        css_keys = []
        for css_variable in gtk_colours.keys():
            css_keys.append("--{0}: {1}".format(css_variable, gtk_colours[css_variable]))
        webview.run_js("$('body').append('<style>:root {" + ";".join(css_keys) + "}</style>')")

        if gtk_colours["dark"] == True:
            webview.run_js("$('body').addClass('dark')")

        # Pass locales to the view
        locales = Locales.get_locales()
        webview.run_js("var LOCALE = " + json.dumps(locales, ensure_ascii=False))

        # Ready!
        webview.run_js("build_view()")

    def shutdown(self):
        """
        The application is requested to exit. Gracefully stops operations.
        """
        dbg.stdout("Closing Software Boutique...", dbg.action, 1)
        exit(0)

    def recv_data(self, raw):
        """
        Receive data (e.g. user input) from the view.
        This will be converted to a Python dictonary for the controller/model to parse.

        :param raw: String containing the data stream
        """
        dbg.stdout("→ Controller: " + str(raw), dbg.debug, 1)

        try:
            data = json.loads(raw)
        except Exception:
            dbg.stdout("Internal Error: Controller cannot parse data!", dbg.error)
            return False

        try:
            request = data["request"]
        except Exception:
            dbg.stdout("Internal Error: Controller received invalid data!", dbg.error)
            dbg.stdout(data, dbg.error)
            return False

        if request == "ping":
            self.send_data({"request": "ping"})

    def send_data(self, raw):
        """
        Send data (e.g. interface update) to the view.
        This will be converted to JSON (string) for the view to parse.

        :param raw: Python dictonary containing the data stream
        """
        dbg.stdout("→ View: " + str(raw), dbg.debug)

        try:
            data = json.dumps(raw, ensure_ascii=False)
            webview.send_data(data)
            return True
        except Exception:
            dbg.stdout("Internal Error: Cannot parse data for view!", dbg.error)
            return False


class Locales():
    """
    A dictionary containing all of the locales that are used in the view.

    The view will store locales as a JSON object under the 'LOCALE' variable
    when the application starts.

    For simplicity, all of the locales are within this file and stored as
    'software-boutique' and use Python's gettext when they are built or re-generated.
    """
    def get_locales():
        return {
            "title": _("Software Boutique"),

            # Header Buttons
            "browse": _("Browse"),
            "queue": _("Queue (0)"), # 0
            "installed": _("Installed"),
            "news": _("News"),
            "search": _("Search"),
            "settings": _("Settings"),

            # Titles for pages
            "title_browse": _("Browse for Applications"),
            "title_queue": _("Queued Changes"),
            "title_installed": _("Installed Software"),
            "title_news": _("What's New?"),
            "title_search": _("Search"),
            "title_settings": _("Boutique Settings"),

            # Header Tooltips
            "tooltip_browse": _("View curated software or list applications by category"),
            "tooltip_queue": _("View pending software operations"),
            "tooltip_installed": _("View software currently installed on this system"),
            "tooltip_news": _("See the latest changes to the curated software picks"),
            "tooltip_search": _("Look for software available for your system"),
            "tooltip_settings": _("Change options related to Software Boutique"),
            "tooltip_back": _("Go back to the previous page"),

            # Footer
            "queue_ready": _("Ready."),
            "queue_ready_state": _("Installation progress will appear here."),
            "queue_downloading": _("Downloading XXX (1 of 2)..."), # XXX, 1, 2
            "queue_installing": _("Installing XXX (1 of 2)..."), # XXX, 1, 2
            "queue_progress": _("1 MB of 2 MB"), # 1, 2
            "queue_success": _("Finished."),
            "queue_success_state": _("1 installed, 2 updated, 3 removed."), # 1, 2, 3
            "queue_error": _("There were problems completing your request."), # XXX
            "queue_error_state": _("1 succeeded, 2 failed."), # 1, 2

            # Queue page
            "queue_list_title_processing": _("In Progress"),
            "queue_list_title_processed": _("Completed"),
            "queue_list_title_pending": _("Queued"),
            "queue_list_success_install": "", # Unused, 'Launch' button only.
            "queue_list_success_remove": _("Successfully removed"),
            "queue_list_failed_install": _("Failed to install"),
            "queue_list_failed_remove": _("Failed to remove"),
            "queue_list_clear": _("Clear List"),
            "queue_list_pending_install": _("Waiting for installation"),
            "queue_list_pending_remove": _("Waiting for removal"),
            "queue_list_empty": _("Nothing queued. When you install or remove software, its progress will appear here."),

            # General Actions
            "launch": _("Launch"),
            "view_details": _("View Details"),

            # Settings
            "about": _("About"),
            "ver_software": _("Software Boutique 2.0"), # 2.0
            "ver_index": _("Index Revision 123"), # 123
            "last_updated": _("Last Updated: []"), # []
            "backend": _("Supported Backends"),
            "backend_apt": _("PackageKit (Apt)"),
            "backend_snap": _("Snapd (Snapcraft)"),
            "backend_appstream": _("AppStream (Metadata)"),
            "backend_working": _("Enabled"),
            "backend_not_working": _("Unavailable"),
            "interface": _("Interface"),
            "hide_proprietary": _("Hide proprietary applications"),
            "hide_proprietary_help": _("Omit non-free software from being shown in Browse or Search."),
            "show_advanced": _("Show technical details for applications"),
            "show_advanced_help": _("When viewing an application, additional details like sources and packages will be shown."),
            "precise_time": _("Prefer precise times"),
            "precise_time_help": _("Relative time ('2 days ago') is used by default. Checking this will always show an exact date/time."),
            "misc": _("Miscellaneous"),
            "show_intro": _("Show Introduction Screen"),

            # End
            "": ""
        }


class CommandLine():
    def parse_parameters():
        global _
        parser = argparse.ArgumentParser(add_help=False)
        parser._optionals.title = _("Optional arguments")
        parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
        parser.add_argument("-v", "--version", help=_("Print progran version and exit"), action="store_true")
        parser.add_argument("-d", "--verbose", help=_("Be verbose for diagnosis/debugging"), action="store_true")
        parser.add_argument("--arch", help=_("Show index listings for a specific architecture, e.g. armhf"))
        parser.add_argument("--codename", help=_("Show index listings for a specific release, e.g. bionic"))
        parser.add_argument("--locale", help=_("Force locale for interface"))
        parser.add_argument("--no-apt", help=_("Disable apt (PackageKit) backend"))
        parser.add_argument("--no-snap", help=_("Disable snapd backend"))

        # For development use only - developer tools and frontend testing
        parser.add_argument("--inspect", help=argparse.SUPPRESS, action="store_true")

        args = parser.parse_args()

        if args.version:
            dbg.stdout("{0} {1}".format(_("Version"), __VERSION__))
            exit(0)

        if args.verbose:
            dbg.verbose_level = 1
            dbg.stdout("Verbose enabled", dbg.debug, 1)

        if args.inspect:
            dbg.verbose_level = 2

        if args.arch:
            Config.os_arch = args.arch
            dbg.stdout("=> Showing listings for arch: " + args.arch, dbg.debug)

        if args.codename:
            Config.os_codename = args.codename
            dbg.stdout("=> Showing listings for release: " + args.codename, dbg.debug)

        if args.locale:
            _ = Common.setup_translations(__file__, "software-boutique", arg.locale)
            dbg.stdout("=> Forcing locale: " + arg.locale, dbg.debug)

        if args.no_apt:
            dbg.stdout("=> PackageKit disabled via argument", dbg.debug, 1)

        if args.no_snap:
            dbg.stdout("=> Snapd disabled via argument", dbg.debug, 1)


if __name__ == "__main__":
    dbg = Common.Debugging()
    _ = Common.setup_translations(__file__, "software-boutique")
    CommandLine.parse_parameters()
    pref = Preferences.Preferences(dbg, "preferences", "software-boutique")

    # Init controller
    controller = SoftwareBoutiqueController()

    # Init window
    webview = ViewWebView.WebView(dbg, controller)
    main = ViewAppWindow.ApplicationWindow(controller)
    main.build(webview, Common.get_data_source(), Locales.get_locales()["title"])

    main.run()

