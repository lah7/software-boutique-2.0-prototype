#!/usr/bin/python3
# -*- coding:utf-8 -*-
#
# Copyright (C) 2015-2019 Luke Horwell <code@horwell.me>
# Copyright (C) 2015-2018 Martin Wimpress <code@flexion.org>
#
# Software Boutique is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Software Boutique is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Software Boutique. If not, see <http://www.gnu.org/licenses/>.
#

"""
Software Boutique - a software distribution program for Ubuntu MATE to curate
a selection of tried & tested, best in class applications that integrate well
with the Ubuntu MATE desktop.
"""

import argparse
import gettext
import inspect
import json
import locale
import os
import random
import requests
import signal
import subprocess
import sys
import time
import traceback
import webbrowser
from datetime import datetime
from threading import Thread
from shutil import rmtree

__VERSION__ = "19.10.0"

try:
    import pylib.config as Config
    import pylib.common as Common
    import pylib.distro as Distro
    import pylib.preferences as Preferences
    import pylib.views.app_window as ViewAppWindow
    import pylib.views.notification as ViewNotification
    import pylib.views.web_view as ViewWebView
except ImportError:
    import software_boutique.config as Config
    import software_boutique.common as Common
    import software_boutique.distro as Distro
    import software_boutique.preferences as Preferences
    import software_boutique.views.app_window as ViewAppWindow
    import software_boutique.views.notification as ViewNotification
    import software_boutique.views.web_view as ViewWebView


class SoftwareBoutiqueController(object):
    """
    The main execution of the GUI.
    """
    def __init__(self):
        data_source = Common.get_data_source()

        # If the app isn't even compiled, stop.
        # If the app mysterously lost its data, also stop.
        if not os.path.exists(os.path.join(data_source, "boutique.css")):
            if data_source.startswith("/usr"):
                dbg.stdout(_("Software Boutique is missing critical data at this path:"), dbg.error, 0)
                dbg.stdout("  => " + data_source, dbg.error, 0)
                dbg.stdout(_("The application cannot start. Please try re-installing Software Boutique."), dbg.error, 0)
            else:
                dbg.stdout("Silly developer! You forgot to compile me, please run 'software-boutique-dev' instead.", dbg.error, 0)
            exit(1)

        # User Preferences
        if pref.read("advanced-mode", False) == True:
            self.advanced_mode = True
        else:
            self.advanced_mode = False


class CommandLine():
    def parse_parameters():
        global _
        parser = argparse.ArgumentParser(add_help=False)
        parser._optionals.title = _("Optional arguments")
        parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
        parser.add_argument("-v", "--version", help=_("Print progran version and exit"), action="store_true")
        parser.add_argument("-d", "--verbose", help=_("Be verbose for diagnosis/debugging"), action="store_true")
        parser.add_argument("--arch", help=_("Show index listings for a specific architecture, e.g. armhf"))
        parser.add_argument("--codename", help=_("Show index listings for a specific release, e.g. bionic"))
        parser.add_argument("--locale", help=_("Force locale for interface"))

        # For development use only - developer tools and frontend testing
        parser.add_argument("--inspect", help=argparse.SUPPRESS, action="store_true")

        args = parser.parse_args()

        if args.version:
            dbg.stdout("{0} {1}".format(_("Version"), __VERSION__))
            exit(0)

        if args.verbose:
            dbg.verbose_level = 1
            dbg.stdout("Verbose enabled", dbg.debug, 1)

        if args.inspect:
            dbg.verbose_level = 3

        if args.arch:
            Config.os_arch = args.arch
            dbg.stdout("=> Showing listings for arch: " + args.arch, dbg.debug)

        if args.codename:
            Config.os_codename = args.codename
            dbg.stdout("=> Showing listings for release: " + args.codename, dbg.debug)

        if args.locale:
            _ = Common.setup_translations(__file__, "software-boutique", arg.locale)
            dbg.stdout("=> Forcing locale: " + arg.locale, dbg.debug)


if __name__ == "__main__":
    dbg = Common.Debugging()
    _ = Common.setup_translations(__file__, "software-boutique")
    CommandLine.parse_parameters()
    pref = Preferences.Preferences(dbg, "preferences", "software-boutique")

    # Init controller
    controller = SoftwareBoutiqueController()

    # Init window
    webview = ViewWebView.WebView(dbg)
    main = ViewAppWindow.ApplicationWindow()
    main.build(webview, Common.get_data_source())

    main.run()

