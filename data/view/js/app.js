//
// Application List & Details - handles the view for both screens, and common
//                              interactions like instructing an app for install,
//
var EXAMPLE = [
    {
        "id": "accessories",        // (str) ID used for element and locale string.
        "icon_path": "/path/to/svg" // (str) Absolute path to icon
    }
];

// Actual data set at app start.
var CATEGORIES = [];

// Global variables
var GENERIC_ICON_PATH = "ui/generic-package.svg";


/*************************************************
 * Send request to the controller.
*************************************************/
function launch_app_id(id) {
    //
    // Start an application (from queue or app details page)
    //
    send_data("app_launch", {
        "id": id
    });
}

function view_error_app_id(id) {
    //
    // View error details for a failed item in the queue.
    //
    send_data("app_show_error", {
        "id": id
    });
}

function request_category_list(category_id, element_id) {
    //
    // Fetches an application list for a specific category or section (e.g. installed)
    //
    show_loading();
    send_data("request_category_list", {
        "category": category_id,
        "element": element_id
    });
}

function install_app(app_id) {
    //
    // Install an application.
    //
    send_data("app_install", {
        "id": app_id
    });
}

function reinstall_app(app_id) {
    //
    // Reinstall an application.
    //
    send_data("app_reinstall", {
        "id": app_id
    });
}

function remove_app(app_id) {
    //
    // Remove an application.
    //
    send_data("app_remove", {
        "id": app_id
    });
}

function info_app(app_id) {
    //
    // Open details about an application.
    //
    send_data("app_info", {
        "id": app_id
    });
    show_loading();
}

/*************************************************
 * Received update from the controller.
*************************************************/
function populate_app_list(data) {
    //
    // Presents a list of applications gathered by the controller.
    //
    // Variable         Example                 Description
    // ---------------- ----------------------- -----------------------------------
    // request          populate_app_list       Required
    // category         games / fixes / themes  ID of the category.
    // element          123456789               ID randomly generated by view initiating the request.
    // apps             [{1..},{2..}]           List consisting of data describing the applications in JSON format.

    _populate_app_list(data.category, data.element, data.apps);
    hide_loading();
}

function open_app_details(data) {
    //
    // Opens the details page for an application. Reviews are not included in this
    // response, as they may take some time to retrieve.
    //
    // Variable         Example                 Description
    // ---------------- ----------------------- -----------------------------------
    // request          get_app_details         Required
    // data             {...}                   Details of the application.

    _open_app_details(data.data);
    hide_loading();
}


/*************************************************
 * Internal view functions to update the page.
*************************************************/
function set_tab_browse(category_id) {
    //
    // User chooses the "Browse" tab.
    //
    var categories = [];

    for (c = 0; c < CATEGORIES.length; c++) {
        uid = CATEGORIES[c].id;
        icon_path = CATEGORIES[c].icon_path;

        categories.push(`
            <a id='category-${uid}' onclick="change_category('${uid}')" tabindex="0" class="${uid == category_id ? 'active' : ''}">
                <img src="${icon_path}"/>
                <label>${get_string(uid)}</label>
            </a>`);
    }

    // Set title when browsing a category.
    if (category_id != null && get_string(category_id) != null) {
        change_title(get_string("browse") + ' ' + get_string(category_id));
    }

    // Populate the tab.
    var element_id = get_random_element_id();
    $("content").html(`
        <div class="browse-page">
            <categories>
                ${categories.join("")}
            </categories>
            <app-list id="${element_id}">
                ${category_id == null ? _get_app_list_unselected() : ""}
                ${category_id == "fixes" ? _get_app_list_fixes() : ""}
            </app-list>
        </div>
    `);

    // Request controller to fetch application list (which is async w. callback)
    // Unless:
    //  - no category is selected, in which the welcome message was displayed.
    //  - it's the fixes page, which doesn't need any apps populating.
    if (category_id != null && category_id != "fixes") {
        request_category_list(category_id, element_id);
    }
}

function _populate_app_list(category_id, element_id, data) {
    //
    // Process the data from the controller/backends.
    //
    // Data example:
    //  [
    //      {
    //          "name": "Application 1",
    //          "id": "apt:app1",
    //          "backend": "apt",
    //          "icon": "",
    //          "installed": true,
    //          "summary": "This is a short line describing this application"
    //      },
    //  ]
    //

    var content;

    switch(category_id) {
        case "themes":
            content = _get_app_list_themes(data);
            break;
        default:
            content = _get_app_list_generic(data);
            break;
    }

    $("#" + element_id).html(content);
}

function _get_app_buttons(app_id, installed) {
    //
    // Returns buttons appropriate for an application.
    //
    var compact_view = SETTINGS.compact_list;
    var output = "";

    // Details button (not shown in compact view or when viewing details about app)
    if (compact_view === false && CURRENT_PAGE != "details") {
        output += `<button onclick="info_app('${app_id}')">${get_svg("fa-info-circle")} <label>${get_string("info")}</label></button>`;
    }

    if (installed === false) {
        output += `<button class="btn-install" onclick="install_app('${app_id}')" title="${get_string("install")}">
                        ${get_svg("fa-download")}
                        ${compact_view == false ? get_string("install") : ""}
                   </button>`;
    } else {
        output += `<button class="btn-remove" onclick="remove_app('${app_id}')" title="${get_string("remove")}">
                        ${get_svg("fa-trash")}
                        ${compact_view == false ? get_string("remove") : ""}
                   </button>`;
        output += `<button class="btn-reinstall" onclick="reinstall_app('${app_id}')" title="${get_string("reinstall")}">
                        ${get_svg("fa-reload")}
                        ${compact_view == false ? get_string("reinstall") : ""}
                   </button>`;
    }

    // TODO: Show status of item in queue.

    return output;
}

function _get_app_list_generic(apps) {
    //
    // Returns HTML for application lists used on browse, search and installed pages.
    //
    var compact_list = SETTINGS.compact_list;
    var enabled_apt = SETTINGS.backends.apt;
    var enabled_snap = SETTINGS.backends.snap;
    var content = [];

    function __add_app(app) {
        var output = "";
        if (compact_list === true) {
            output += `<app class="compact ${app.installed === true ? "installed" : ""}" onclick="info_app('${app.id}')" tabindex="0">
                <install-check>${get_svg("fa-check-circle")}</install-check>
                <img src="${app.icon ? app.icon : GENERIC_ICON_PATH}"/>
                <name>${app.name}</name>
                ${_get_app_buttons(app.id, app.installed)};
            </app>`;

        } else {
            output += `<app class="default ${app.installed === true ? "installed" : ""}" tabindex="0">
                <install-check>${get_svg("fa-check-circle")}</install-check>
                <left>
                    <img src="${app.icon ? app.icon : GENERIC_ICON_PATH}"/>
                </left>
                <right>
                    <name>${app.name}</name>
                    <summary>${app.summary}</summary>
                    <button-group>
                        ${_get_app_buttons(app.id, app.installed)}
                    </button-group>
                </right>
            </app>`;
        }
        return output;
    }

    var backends = [
        ["curated", enabled_curated],
        ["snap", enabled_snap],
        ["apt", enabled_apt]
    ];

    for (b = 0; b < backends.length; b++) {
        var backend = backends[b][0];
        var backend_enabled = backends[b][1];

        if (backend_enabled === true) {
            count = 0;
            group_html = []
            for (a = 0; a < apps.length; a++) {
                app = apps[a];
                if (app.backend == backend) {
                    count++;
                    group_html.push(__add_app(app));
                }
            }

            if (count > 0) {
                content.push(`<group>
                        <h2>${get_string("group_" + backend + "_title")}</h2>
                        <p>${get_string("group_" + backend + "_text")}</p>
                        <apps class="${compact_list == true ? "compact" : ""}">${group_html.join("")}</apps>
                    </group>`);
            }
        }
    }

    return content.join("");
}

function _get_app_list_themes(apps) {
    //
    // Returns HTML for applications that are represented as 'themes'.
    //
    // FIXME: Not yet implemented
    return "???";
}

function _get_app_list_unselected() {
    //
    // Returns HTML when no category is selected. This is the welcome page.
    //
    // FIXME: Not yet implemented
    return "???";
}

function _get_app_list_fixes() {
    //
    // Returns HTML when the 'fixes' category is chosen.
    // There are no applications on this page.
    //
    // FIXME: Not yet implemented
    return "???";
}

function _get_app_list_empty() {
    //
    // Returns HTML when there are no applications to display.
    //
    // FIXME: Not yet implemented
    return "???";
}

function change_category(uid) {
    //
    // Buttons call this to change the current category on a Browse page.
    //
    $("categories a").removeClass("active");
    _nav_add_history("browse", uid);
    set_tab_browse(uid);
}

function _open_app_details(data) {
    //
    // Shows the details for an application. Reviews are not included in this
    // response, as they may take some time to retrieve.
    //
    // Data example:
    //  data = {
    //      "name": "Application 1",
    //      "id": "apt:app1",
    //      "backend": "apt",
    //      "icon": "",
    //      "summary": "A generic application",
    //      "description": "This is line 1.\nThis is line 2.\nThis is line 3.",
    //      "nonfree": false,
    //      "free_license": "GNU General Public License",
    //      "arch": ["i386", "amd64", "armhf", "arm64", "powerpc"],
    //      "developer": "Developer Name",
    //      "developer_url": "https://developer.example.com",
    //      "website_url": "https://example.com",
    //      "support_url": "https://support.example.com",
    //      "apt_source": "ppa:org/name", /* Or: "multiverse" if repo, "https://repo.example.com" if external */
    //      "apt_packages": ["app1", "app1-data", "app1-doc"],
    //      "snap_name": "nameofsnap",
    //      "launch_cmd": "app1",
    //      "tags": [],
    //      "screenshots": ["/path/to/image1", "/path/to/image2"],
    //      "version": "20.04.1-ubuntu0",
    //      "installed": true,
    //      "install_date": [2019, 12, 31, 23, 59] /* [YYYY, MM, DD, HH, MM], */
    //      "comments": true
    //  }
    //

    // Update navigation
    change_page("details", data);
    change_title(app.name);
}

function set_page_details(data) {
    //
    // Open the details page providing more details about an application.
    //
    var screenshots = `<empty>${get_string('no_screenshot')}</empty>`;
    if (data.screenshots.length > 0) {
        screenshots = "";
        for (s = 0; s < data.screenshots.length; s++) {
            var path = data.screenshots[s];
            screenshots += `<a class="app-screenshot" href="${path}" data-fancybox="gallery"><img src="${path}"/></a>`;
        }
    }

    var developer_link = "";
    if (data.developer != null) {
        developer_link = `<a onclick="open_uri('${data.developer_url}')" href="#" title="${data.developer_url}">${data.developer}</a>`;
    }

    var buttons = _get_app_buttons(data.id, data.installed);

    var rows = [];
    function __add_row(advanced, title, text) {
        if (advanced === true && SETTINGS.show_advanced === false)
            return;
        rows.push(`<tr><th>${title}</th><td>${text}</td></tr>`);
    }

    __add_row(false, get_string("version"), data.version);
    __add_row(false, get_string("install_date"), data.install_date);

    switch(data.nonfree) {
        case true:
            __add_row(false, get_string("license"), get_string("nonfree"));
            break;
        case false:
            if (data.free_license != null) {
                __add_row(false, get_string("license"), data.free_license);
            } else {
                __add_row(false, get_string("license"), get_string("free"));
            }
            break;
        default:
            __add_row(false, get_string("license"), get_string("unknown"));
            break;
    }

    __add_row(false, get_string("supported_arch"), data.arch.join(", "));

    if (data.launch_cmd != null) {
        __add_row(true, get_string("launch_cmd"), data.launch_cmd);
    }

    // TODO: Tags unused?
    if (data.tags.length > 0) {
        __add_row(false, get_string("tags"), "");
    }

    if (data.website_url != null) {
        __add_row(false, get_string("website"), `<a onclick="open_uri('${data.website_url}')" href="#">${data.website_url}</a>`);
    }

    if (data.support_url != null) {
        __add_row(false, get_string("support"), `<a onclick="open_uri('${data.support_url}')" href="#">${data.support_url}</a>`);
    }

    switch(data.backend) {
        case "apt":
            __add_row(false, get_string("type"), get_string("apt"));

            if (get_string(data.apt_source) == null) {
                __add_row(false, get_string("source"), get_string("unknown"));
            } else {
                var string;
                switch(data.apt_source) {
                    case "main":
                    case "universe":
                    case "restricted":
                    case "multiverse":
                        string = get_string(data.apt_source);
                        break;
                    default:
                        string = data.apt_source;
                        break;
                }

                // TODO: Add icons for Repo/PPA/URL
                __add_row(false, get_string("source"), string);
            }

            // TODO: Improve look of each package
            __add_row(true, get_string("packages"), data.apt_packages.join(", "));
            break;

        case "snap":
            __add_row(false, get_string("type"), get_string("snap"));
            __add_row(true, get_string("snap_name"), data.snap_name);
            break;

        default:
            __add_row(false, get_string("type"), get_string("unknown"));
            break;
    }

    // Assemble layout
    $("content").html(`
        <div class="app-details-page">
            <overview>
                <left>
                    <img id="app-icon" src="${data.icon ? data.icon : GENERIC_ICON_PATH}"/>
                </left>
                <center>
                    <h2 id="app-name">${data.name}</h2>
                    ${developer_link}
                    <p>${data.description}</p>
                    <button-group>
                        ${buttons}
                    </button-group>
                </center>
                <right>
                    <screenshots>
                        ${screenshots}
                    </screenshots>
                </right>
            </overview>
            <table>
                <tbody>
                    ${rows.join("")}
                </tbody>
            </table>
        </div>
    `);
}

