var CATEGORIES = {
    /* Example
     * The 'id' is also used to lookup the string.
    {
        "id": "accessories",
        "icon_path": "/path/to/icon.svg"
    }
    */
};

/*************************************************
 * Send request to the controller.
*************************************************/
// Start an application (from queue or app details page)
function launch_app_id(id) {
    send_data({
        "request": "app_launch",
        "id": id
    });
}

// View error details for a failed item in the queue.
function view_error_app_id(id) {
    send_data({
        "request": "app_show_error",
        "id": id
    });
}

// Fetches an application list for a specific category or section (e.g. installed)
function request_app_list(category_id, element_id) {
    show_loading();
    send_data({
        "request": "request_app_list",
        "category": category_id,
        "element": element_id
    });

}

// Install an application.
function install_app(app_id) {
    send_data({
        "request": "app_install",
        "id": app_id
    });
}

// Reinstall an application.
function reinstall_app(app_id) {
    send_data({
        "request": "app_reinstall",
        "id": app_id
    });
}

// Remove an application.
function remove_app(app_id) {
    send_data({
        "request": "app_remove",
        "id": app_id
    });
}

// Open details about an application.
function info_app(app_id) {
    send_data({
        "request": "app_info",
        "id": app_id
    });
}

/*************************************************
 * Received update from the controller.
*************************************************/
function populate_app_list(data) {
    // Presents a list of applications gathered by the controller.
    //
    // Variable         Example                 Description
    // ---------------- ----------------------- -----------------------------------
    // request          populate_app_list       Required
    // category         games / fixes / themes  ID of the category.
    // element          123456789               ID randomly generated by view initiating the request.
    // apps             [{1..},{2..}]           List consisting of data describing the applications in JSON format.

    _populate_app_list(data.category, data.element, data.apps);
    hide_loading();
}


/*************************************************
 * Internal view functions to update the page.
*************************************************/
function _set_tab_browse(category_id) {
    var categories = [];

    for (c = 0; c < CATEGORIES.length; c++) {
        uid = CATEGORIES[c].id;
        icon_path = CATEGORIES[c].icon_path;

        categories.push(`
            <a id='category-${uid}' onclick="change_category('${uid}')" tabindex="0" class="${uid == category_id ? 'active' : ''}">
                <img src="${icon_path}"/>
                <label>${get_string(uid)}</label>
            </a>`);
    }

    // Set title when browsing a category.
    if (category_id != null) {
        $("#header-title").html(get_string("browse") + ' ' + $("#category-" + category_id + " label").html());
    }

    // Populate the tab.
    var element_id = get_random_element_id();
    $("content").html(`
        <div class="browse-page">
            <categories>
                ${categories.join("")}
            </categories>
            <app-list id="${element_id}">
                ${category_id == null ? _get_app_list_unselected() : ""}
                ${category_id == "fixes" ? _get_app_list_fixes() : ""}
            </app-list>
        </div>
    `);

    // Request controller to fetch application list (which is async w. callback)
    // Unless:
    //  - no category is selected, in which the welcome message was displayed.
    //  - it's the fixes page, which doesn't need any apps populating.
    if (category_id != null && category_id != "fixes") {
        request_app_list(category_id, element_id);
    }
}

function _populate_app_list(category_id, element_id, data) {
    //
    // Process the data from the controller/backends.
    //
    // Data example:
    //  [
    //      {
    //          "name": "Application 1",
    //          "id": "apt:app1",
    //          "backend": "apt",
    //          "icon": "",
    //          "installed": true,
    //          "summary": "This is a short line describing this application"
    //      },
    //  ]
    //

    var content;

    switch(category_id) {
        case "themes":
            content = _get_app_list_themes(data);
            break;
        default:
            content = _get_app_list_generic(data);
            break;
    }

    $("#" + element_id).html(content);
}

function _get_app_list_generic(apps) {
    // Application lists as displayed on browse, search and installed pages.
    var compact_list = SETTINGS.unified_list;
    var enabled_curated = SETTINGS.backends.curated;
    var enabled_apt = SETTINGS.backends.apt;
    var enabled_snap = SETTINGS.backends.snap;
    var content = [];
    var generic_icon = "ui/generic-package.svg";

    function __add_app(app) {
        var output = "";
        if (compact_list === true) {
            output += `<app class="compact ${app.installed === true ? "installed" : ""}" onclick="info_app('${app.id}')" tabindex="0">
                <install-check>${get_svg("fa-check-circle")}</install-check>
                <img src="${app.icon ? app.icon : generic_icon}"/>
                <name>${app.name}</name>`;

            if (app.installed === false) {
                output += `<button class="btn-install" onclick="install_app('${app.id}')" title="${get_string("install")}">${get_svg("fa-download")}</button>`;
            } else {
                output += `<button class="btn-remove" onclick="remove_app('${app.id}')" title="${get_string("remove")}">${get_svg("fa-trash")}</button>`;
                output += `<button class="btn-reinstall" onclick="reinstall_app('${app.id}')" title="${get_string("reinstall")}">${get_svg("fa-reload")}</button>`;
            }

            output += `</app>`

        } else {
            output += `<app class="default ${app.installed === true ? "installed" : ""}" tabindex="0">
                <install-check>${get_svg("fa-check-circle")}</install-check>
                <left>
                    <img src="${app.icon ? app.icon : generic_icon}"/>
                </left>
                <right>
                    <name>${app.name}</name>
                    <summary>${app.summary}</summary>
                <button-group>`;

            output += `<button onclick="info_app('${app.id}')">${get_svg("fa-info-circle")} <label>${get_string("info")}</label></button>`;

            if (app.installed === false) {
                output += `<button class="btn-install" onclick="install_app('${app.id}')">${get_svg("fa-download")} <label>${get_string("install")}</label></button>`;
            } else {
                output += `<button class="btn-remove" onclick="remove_app('${app.id}')">${get_svg("fa-trash")} <label>${get_string("remove")}</label></button>`;
                output += `<button class="btn-reinstall" onclick="reinstall_app('${app.id}')">${get_svg("fa-reload")} <label>${get_string("reinstall")}</label></button>`;
            }

            output += `</button-group>
                        </right>
                        </app>`;
        }
        return output;
    }

    var backends = [
        ["curated", enabled_curated],
        ["snap", enabled_snap],
        ["apt", enabled_apt]
    ];

    for (b = 0; b < backends.length; b++) {
        var backend = backends[b][0];
        var backend_enabled = backends[b][1];

        if (backend_enabled === true) {
            count = 0;
            group_html = []
            for (a = 0; a < apps.length; a++) {
                app = apps[a];
                if (app.backend == backend) {
                    count++;
                    group_html.push(__add_app(app));
                }
            }

            if (count > 0) {
                content.push(`<group>
                        <h2>${get_string("group_" + backend + "_title")}</h2>
                        <p>${get_string("group_" + backend + "_text")}</p>
                        <apps class="${compact_list == true ? "compact" : ""}">${group_html.join("")}</apps>
                    </group>`);
            }
        }
    }

    return content.join("");
}

function _get_app_list_themes(apps) {
    // In this context, the applications are 'themes'.
    // FIXME: Not yet implemented
    return "???";
}

function _get_app_list_unselected() {
    // In this context: No category is selected, shows the welcome page.
    // FIXME: Not yet implemented
    return "???";
}

function _get_app_list_fixes() {
    // In this context: There are no applications to request, shows a list of fixes.
    // FIXME: Not yet implemented
    return "???";
}

function change_category(uid) {
    $("categories a").removeClass("active");
    _nav_add_history("browse", uid);
    _set_tab_browse(uid);
}
